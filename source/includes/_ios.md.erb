# iOS SDK
The Ada iOS SDK is a small framework that is used to embed your Ada Chat bot into your native iOS application.

## iOS Installation
The Ada iOS SDK can be installed manually or using CocoaPods. The SDK supports iOS 10.x and up.

### Option 1: Manual Integration
1. Download the `AdaEmbedFramework.framework.zip` file from the latest release [here](https://github.com/AdaSupport/ios-sdk/releases).
2. Right click on the project file in XCode, then click "Add Files to *MyProjectName*". Ensure that the *Copy groups* option is selected.
3. Ensure your Deployment Target is set to 10.0, which is the minimum iOS version that the Ada iOS SDK is compatible with.
4. In the project settings under General, link the `AdaEmbedFramework.framework` under the Embedded Binaries section. You can do this by dragging the framework from the left side list in the Embedded Binaries list.

### Option 2: CocoaPods

```swift
# Podfile
platform :ios, '10.0'

target 'MyApp' do
  use_frameworks!

  # Pods for MyApp
  pod "AdaEmbedFramework", "~>1.3.0"

end
```

> Be sure to get the latest version at [https://cocoapods.org/pods/AdaEmbedFramework](https://cocoapods.org/pods/AdaEmbedFramework).

The AdaEmbedFramework CocoaPod is public, however use of the Chat interface is gated. To gain access please reach out to an Ada Account Manager.

1. Add the `AdaEmbedFramework` to your Podfile.

2. Install the pod using:

`pod install`


## Quick Start

```swift
import AdaEmbedFramework

# ...

lazy var adaFramework = AdaWebHost(handle: "ada-example")
```

Once you have installed the Ada iOS SDK, you are ready to use it in your app! To start, import `AdaEmbedFramework` into your controller. Then, create an instance of the `AdaWebHost`.

> The lazy property prevents AdaWebHost from initializing until the property is used. Use of this property may help to prevent unwanted chatters from being created in the background.


> Please note "ada-example" is being used for demonstration purposes. Be sure to sure modify "handle", as well as any other values as needed for your bot.

Finally, launch Ada using any of the 3 opening methods: [launchModalWebSupport](#ios-sdk-api-methods-launchmodalwebsupport), [launchNavWebSupport](#ios-sdk-api-methods-launchnavwebsupport), or [launchInjectingWebSupport](#ios-sdk-api-methods-launchinjectingwebsupport).

## API

### Settings
`AdaWebHost` can take various input parameters to customize the behaviour of your Chat bot.

#### appScheme
`appScheme: String = ""`

Can be used to pass the scheme name of the host app. This allows for more robust handling of universal links.

#### cluster
`cluster: String = ""`

Specifies the Kubernetes cluster to be used. Unless directed by an Ada team member, you will not need to change this value.

#### greeting
`greeting: String = ""`

This can be used to customize the greeting messages that new users see. This is useful for setting view-specific greetings across your app. The greeting should correspond to the ID of the Answer you would like to use. The ID can be found in the URL of the corresponding Answer in the dashboard.

#### handle
`handle: String`

The handle for your bot. This is a required field.

#### language
`language: String = ""`

Takes in a language code to programatically set the bot language. Languages must first be turned on in the Settings > Multilingual page of your Ada dashboard. Language codes follow the [ISO 639-1 language format](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).

#### metaFields

```swift
lazy var adaFramework = AdaWebHost(handle: "ada-example", metafields: ["tier": "pro"])
```

`metafields: [String: String]? = [:]`

Used to pass meta information about a Chatter. This can be useful for tracking information about your end users, as well as for personalizing their experience. For example, you may wish to track the phone_number and name for conversation attribution. Once set, this information can be accessed in the email attachment from Handoff Form submissions, or via the Chatter modal in the Conversations page of your Ada dashboard. Should you need to programatically change these values after bot setup, you can make use of the [setMetaFields](#setmetafields_-fields-string-any) method below.

#### openWebLinksInSafari
`openWebLinksInSafari: Bool = false`

External web links now open by default in-app via the SFSafariViewController. To open external links in the Safari browser, pass `openWebLinksInSafari: true` to `AdaWebHost`.

#### zdChatterAuthCallback
`zdChatterAuthCallback: ((((_ token: String) -> Void)) -> Void)? = nil`

```swift
lazy var adaFramework = AdaWebHost(handle: "nic", zendeskAuthCallback: { callback in
    // Request JWT from your API
    // Then...
    callback("your.JWT")
})
```

When called, the `zdChatterAuthCallback` can be used to request a JWT token from your API, and then have it passed to Ada. This allows for a shared trust between Ada and Zendesk, and in turn for verifiable chatter identity.

### Actions
#### deleteHistory
`deleteHistory()`

Deletes the `chatter` used to fetch conversation logs for an end-user from storage. When a user opens a new Chat window a new `chatter` will be generated.

#### launchInjectingWebSupport

```swift
adaFramework.launchInjectingWebSupport(into: injectingView)
```

`launchInjectingWebSupport(into view: UIView)`

Launches Ada Chat into a specified subview.

#### launchModalWebSupport

```swift
adaFramework.launchModalWebSupport(from: self)
```

`launchModalWebSupport(from viewController: UIViewController)`

Launches Ada Chat in a modal view overtop your current view.

#### launchNavWebSupport

```swift
adaFramework.launchNavWebSupport(from: navigationController)
```

`launchNavWebSupport(from navController: UINavigationController)`

Pushes a view containing Ada Chat to the top of your navigational stack.

#### reset
`reset()`

Can be used to create a new `chatter` and refresh the Chat window.

#### setMetaFields

```swift
adaFramework.setMetaFields([
    "firstName": "Jane",
    "lastName": "Doe",
    "tier": "pro"
])
```

`setMetaFields(_ fields: [String: Any])`

Used to set meta data for a chatter after instantiation. This is useful if you need to update user data after Ada Chat has already launched.
