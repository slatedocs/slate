# Embed2

Embed2 is a small JavaScript script that embeds your Ada Chat bot into your web page. It comes equipped with various settings and actions to tailor the end-user experience.

## Quick Start

### 1. Turn on your bot
The first step towards adding your Ada Chat Bot to your web page is to turn on the Web Chat integration in your Settings > Platforms page.

<%= image_tag "images/turn-on-bot.png" %>

### 2. Embed script

```html
<head>
  ...
  <script
    id="__ada"
    data-handle="<YOUR-BOT-HANDLE>"
    src="https://static.ada.support/embed2.js"
  ></script>
</head>
```
> Be sure to replace \<YOUR-BOT-HANDLE> with your own bot handle. It's usually the name of your company.

Once you have your website all ready-to-go, find the page where you'd like to embed the Ada Chat bot. In most cases this will be an HTML file. Here you will need to paste the following into the `<head>` tag.

### 3. That's it! ðŸŽ‰
You should now see a small question mark button on the bottom right corner of your page. Clicking the button will toggle the Web Chat in and out of view.

[You can see see a working example here.](https://jsfiddle.net/1cdnye94/)

## Advanced Setup

In some situations, the quick setup above may be too simplistic. You may want to delay instantiation of Embed2 until a certain event, your application might be a Single-Page App and you need more control, or perhaps you want to set the bot language. Whatever the reason, Embed2 ships with additional features to help you get setup.

If you still require recommendations on how best to implement the Embed2 script, please reach out to an Ada team member. However, please note that all implementations are ultimately the responsiblity of your development team.

### Ada Settings
```html
<script>
  window.adaSettings = {
    ...
  }
</script>
...
<!-- Define the Embed script afterwards -->
```
Embed2 supports a number of configurable options which can be set through an `adaSettings` object you define on your `window` scope. Alternatively, settings can also be passed to the `adaEmbed.start` method (see [Lazy Mode](#embed2-advanced-setup-lazy-mode) below).

A full list of `adaSettings` options can be found in [API Reference](#embed2-api-reference).

<aside class="notice">
Embed2 requires `window.adaSettings` be defined before the script loads. You must therefore either define `window.adaSettings` before the Embed script, or make use of async on your embed script (see Async below).
</aside>

### Lazy Mode

```html
<script
  id="__ada"
  data-lazy
  data-handle="<YOUR-BOT-HANDLE>"
  src="https://static.ada.support/embed2.js"
></script>
```
> Start Embed2 in your JS when you are ready to.

```js
window.adaEmbed.start({
  handle: "my-bot",
  metaFields: {
    username: "Ada Lovelace",
    phone_number: "123-456-7890"
  },
  chatterTokenCallback: (chatter) => console.log(chatter)
});
```

Lazy mode can be configured to delay Embed2 instantiation. To put Embed2 in lazy mode, add the attribute `data-lazy` to the Embed2 script.

When you are ready to instantiate Embed2, call the `start` action. You can pass any settings you would normally set in `window.adaSettings` here.

### Async

```html
<script
  async
  id="__ada"
  data-handle="<YOUR-BOT-HANDLE>"
  src="https://static.ada.support/embed2.js"
></script>
```

> Approach 1: Use the native script onload handler

```html
<script
  async
  id="__ada"
  onload="window.adaEmbed.toggle()"
  data-handle="<YOUR-BOT-HANDLE>"
  src="https://static.ada.support/embed2.js"
></script>
```

> Approach 2: Use the adaReadyCallback

```js
window.adaSettings = {
  adaReadyCallback: () => {
    window.adaEmbed.toggle();
  }
};
```

Since HTML5, the `async` attribute has been available for HTML script elements. From **MDN**, it "allows the elimination of parser-blocking JavaScript where the browser would have to load and evaluate scripts before continuing to parse". It may be applied to the Embed2 script in order to improve load times of your page, however it does come with certain caveats.

If your bot implementation makes use of any actions from the global `adaEmbed` object, you must wait for the object to be added to your document. There are two common approaches for handling this situation.

**Approach 1** involves using the native script `onload` handler. When the script has loaded, the `load` event will be triggered. It is safe to call `adaEmbed` actions from here.

**Approach 2** involves using the [adaReadyCallback](#embed2-api-reference-settings-adareadycallback), which you can set in `window.adaSettings`. Note that while in the examples provided `toggle` will work effectively the same way, `adaReadyCallback` is triggered after `adaEmbed.start(...)` has executed. Meanwhile, `onload` is simply triggered when the Embed2 script has been loaded.

### RequireJS

```html
<script>
  window.adaSettings = {
    handle: "<YOUR-BOT-HANDLE>"
  };
</script>

<script
  src="https://static.ada.support/embed2.js"
></script>
```

If you are using RequireJS as your module loader, you may encounter issues with the standard Embed2 setup. This is because RequireJS does not know how to interpret the `id` and `data-handle` attributes Ada uses. Instead of setting this attributes, you can just set `handle` in your `window.adaSettings` object.

If you experience additional errors be sure to check out the [RequireJS Common Errors documentation](https://requirejs.org/docs/errors.html).

## Upgrading From Embed1

If you are coming to Embed2 from Embed1, great! Upgrading couldn't be simpler. For basic setups, you most likely just need to upgrade you Embed script `src` from "https://static.ada.support/embed.js" to "https://static.ada.support/embed2.js".

Although the Embed2 API is almost identical to Embed1, in some cases features have been removed or modified. You can find a comprehensive list of changes below.

Embed1 Feature | Status | Comments
-------------- | -------------- | --------------
`authCallback` | Modified | Renamed to `zdChatterAuthCallback`.
`crossWindowPersistence` | Modified | Simplified to accept a boolean instead of an object.
`dragAndDrop` | Deprecated |
`mobileOverlay` | Deprecated |
`private` | Modified | Renamed to `privateMode`.
`styles` | Same API | Now requires a feature flag to use.

Additionally, all actions have been modified to return Promises.

## API Reference
Embed2 supports numerous settings and actions to help you customize the look and behaviour of your bot. Settings are set in the `adaSettings` object when you embed your script. They determine intrinsic properties like bot style and behaviour. Conversely, actions can be called at any point in time to toggle Chat, update user meta data, and more.

### Settings
Settings are set on the window object as `window.adaSettings = { ... }`. Alternatively, they can be passed directly do `adaEmbed.start({ ... })` for advanced configurations. A full list of available settings is provided below:

#### adaReadyCallback

```html
<script type="text/javascript">
  window.adaSettings = {
    adaReadyCallback: ({ isRolledOut }) => {
      console.log("Ada Embed is done setting up. Chat support is now available.");
    }
  }
</script>
```

`adaReadyCallback?(params: { isRolledOut: boolean }): void;`

Specifies a callback function to be called when Embed2 has finished setting up. This is especially useful when Embed2 is loaded asynchronously.

#### chatterTokenCallback
`chatterTokenCallback?(chatter: string): void;`

Specifies a callback for when the `chatter` token has been set in Chat.  This is called when chat is first opened by a chatter.

#### cluster
`cluster?: string;`

Specifies the Kubernetes cluster to be used. Unless directed by an Ada team member, you will not need to change this value.

#### crossWindowPersistence
`crossWindowPersistence?: boolean;`

When set enables the Chat drawer open / close state to persist across windows and page refreshes using the `Window.sessionStorage` API. When the browser is closed the state is forgotten.

<aside class="notice">
We recommend enabling this feature if your bot uses Ada Glass.
</aside>

#### customDomains

```html
<script type="text/javascript">
  window.adaSettings = {
    customDomains: {
      embedModern: "https://my-cdn.com/embed2/<hash>/client-modern.js",
      embedLegacy: "https://my-cdn.com/embed2/<hash>/client-legacy.js"
    }
  }
</script>
```

`customDomains?: { embedLegacy: string; embedModern: string; };`

To reduce bundle size for users on modern browsers, Embed2 dynamically loads either a `modern` or `legacy` client script. However, this also means that serving Embed2 from your own domain is not as easy as hosting [the entry script](https://static.ada.support/embed2.js).

To get around this issue, the `customDomains` option can be used to specify the dynamic client scripts (which you have self-hosted).

<aside class="notice">
The Embed2 entry and client scripts must all use the same version. If you require assistance getting the latest versions please reach out to an Ada bot specialist.
</aside>

#### domain
`domain?: string;`

Can be used to change the subdomain. Unless directed by an Ada team member, you will not need to change this value.

#### embedStyles
`embedStyles?: string;`

The embedStyles option can be used to override default styles inside Embed2 elements. The value of the string should be the CSS rule-set you wish to apply inside the iFrame. Note that the `ui_customization` feature flag is required to use this feature, and may not be available in all packages.

<aside class="warning">
Setting custom styles based on Embed2 elements is inherently brittle, and can cause your styles to break over time. We do not recommend use of custom styles unless absolutely necessary. If custom styles are used, you should only rely on direct element IDs.
</aside>

#### greeting
`greeting?: string;`

This can be used to customize the greeting messages that new users see. This is useful for setting page-specific greetings across your app. The greeting should correspond to the ID of the Answer you would like to use. The ID can be found in the URL of the corresponding Answer in the dashboard.

#### handle
`handle:? string;`

Can be used to specify the bot handle if one is not specified in the script `data-handle` attribute.

#### hideMask
`hideMask?: boolean;`

When set to `true`, this will prevent the default mask from appearing over top of your site's content when opened on desktop.

<aside class="notice">
We recommend setting the value to `false`. This will allow end-users to navigate the page while the Ada Chat window is open.
</aside>

#### language
`language?: string;`

Takes in a language code to programatically set the bot language. Languages must first be turned on in the *Settings > Multilingual* page of your Ada dashboard. Language codes follow the [ISO 639-1 language format](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).

#### metaFields

```html
<script type="text/javascript">
  window.adaSettings = {
    metaFields: {
      phone_number: "(123) 456-7890",
      name: "Ada Lovelace"
    }
  }
</script>
```

`metaFields?: object;`

Used to pass meta information about a `chatter`. This can be useful for tracking information about your end users, as well as for personalizing their experience. For example, you may wish to track the `phone_number` and `name` for conversation attribution. Once set, this information can be accessed in the email attachment from Handoff Form submissions, or via the *Chatter Info* modal in the *Conversations* page of your Ada dashboard. Should you need to programatically change these values after bot setup, you can make use of the `setMetaFields` action below.

<aside class="notice">
Meta field keys should not include whitespace, emojis, special characters or periods.
</aside>

#### lazy
`lazy?: boolean;`

When `true`, this will prevent the bot from loading until the `adaEmbed.start(...)` method is called.

#### parentElement

```html
<head>
  <!-- ... -->
  <script type="text/javascript">
    window.adaSettings = {
      parentElement: document.getElementById("custom-iframe")
    }
  </script>
</head>
<body>
  <!-- ... -->
  <div id="custom-iframe"></div>
</body>
```

`parentElement?: string | HTMLElement;`

Specifies where to mount the `<iframe>` if the default side drawer is not desired. Accepts the `HTMLElement` or element `id` of the desired parent element.

<aside class="warning">
  Chat will render immediately inside the `parentElement` provided. It means that the conversation would also get initialized. We do not recommend initializing Embed2 with `parentElement` setting automatically on every page, since it could lead to low engagement rates.
</aside>

#### preload
`preload?: boolean;`

By default, Embed2 will only load Web Chat once the user has clicked the Chat button. In this manner, the net Ada bundle size is reduced for users who never engage with Ada Web Chat. However, this will also cause longer wait times for users loading Web Chat, as they must first fetch the Web Chat bundle before the UI can load. On slow internet connections (esp. mobile users), this delay may be exacerbated.

Should you wish, you may preload Web Chat by setting the `preload` option to `true`.

#### privateMode
`privateMode?: boolean;`

If set to `true`, this will put Web Chat into "Private" mode. This will cause Web Chat to forget conversation history on refresh. This is effectively the same as setting your Web Chat platform persistence to "Forget After Reload" in the *Settings > Platforms* page of your Ada dashboard. More information on persistence can be found [here](https://adasupporthelp.zendesk.com/hc/en-us/articles/360018115813-Chatter-Persistence-Remembering-Conversations-).

#### rolloutOverride
`rolloutOverride?: number;`

Can be used to override the rollout value set in the dashboard. This can be useful if you need page-specific rollout values. Accepts any number between `0` and `1`.

#### styles
`styles?: string;`

The styles option can be used to override default styles inside the Web Chat iFrame. The value of the string should be the CSS rule-set you wish to apply inside the iFrame. Note that the `ui_customization` feature flag is required to use this feature, and may not be available in all packages.

<aside class="warning">
Setting custom styles based on Chat elements is inherently brittle, and can cause your styles to break over time. We do not recommend use of custom styles unless absolutely necessary. If custom styles are used, you should only rely on direct element IDs.
</aside>

#### testMode
`testMode?: boolean;`

Marks the `chatter` as a test user.

#### toggleCallback
`toggleCallback?(isDrawerOpen: boolean): void;`

Can be used to trigger side-effects when the Web Chat drawer is opened or closed.

#### zdChatterAuthCallback
`zdChatterAuthCallback?(callback: (token: string) => void): void;`

```js
window.adaSettings = {
  zdChatterAuthCallback: (callback) => {
    // Here you should make a request to get the fresh JWT token
    const token = "token goes here";
    callback(token)
  }
};
```

When called, the `zdChatterAuthCallback` can be used to request a JWT token from your API, and then have it passed to Ada. This allows for a shared trust between Ada and Zendesk, and in turn for verifiable chatter identity.

### Actions
Actions can be called from the global adaEmbed object. A list of the available actions is available below.

#### createProactive [deprecated]

Note: although it is currently still supported, `createProactive` will be deprecated in the future. `triggerCampaign` should be favored.

```js
window.adaEmbed.createProactive("Hi there! Is there something I can help you with?", 10, "5e9481e296ac6c4467092be5");
```

`createProactive(body: string, duration?: number, responseId?: string): Promise<void>;`

Can be used to programatically create a proactive intro message. If an Answer ID is provided, that answer will be triggered when Chat is opened. `createProactive` returns a Promise, which can be used to wait for one proactive intro before displaying the next.

This action requires the `developer_proactive` feature flag to be turned on.

#### deleteHistory
`deleteHistory(): Promise<void>;`

Deletes the `chatter` used to fetch conversation logs for an end-user from storage. When a user opens a new Chat window a new `chatter` will be generated.

#### evaluateCampaignConditions
`evaluateCampaignConditions(options: object): Promise<void>;`

This is similar to `triggerCampaign` - however, instead of triggering a specific Campaign, `evaluateCampaignConditions` evaluates the trigger conditions of the Campaigns in priority order and triggers the first Campaign (if any) whose conditions are matched.

An optional argument `options` can be passed. These options may be helpful when testing your Campaign. The options are:
`ignoreStatus?: boolean`: if `ignoreStatus` is `true`, inactive and draft Campaigns will also have their trigger conditions evaluated and may be triggered.
`ignoreFrequency?: boolean`: if `ignoreFrequency` is `true`, Campaigns that have already been triggered within the frequency configured on the Campaign will also have their trigger conditions evaluated and may be triggered.

This action requires the Ada Engage Campaigns feature.

#### getInfo
`getInfo(): Promise<WindowInfo>;`

Returns an object containing information about the bot, including `hasActiveChatter`, `hasClosedChat`, and `isChatOpen`.

#### reset

```js
window.adaEmbed.reset({
  greeting: "5e9481e296ac6c4467092be5"
});
```

`reset(resetParams?: ResetParams): Promise<void>;`

Creates a new `chatter` and refreshes the Chat window. `reset` can take an optional object allowing `language`, `metaFields`, and `greeting` to be changed for the new `chatter`.

To prevent creating a new `chatter` (and maintain conversation history), `resetChatHistory` can be passed to the object with a value of `false`.

#### setMetaFields

```js
window.adaEmbed.setMetaFields({
  phone_number: "(123) 456-7890",
  name: "Ada Lovelace"
});
```

`setMetaFields(options: object): Promise<void>;`

Used to update `metaFields` after Chat has been opened. In most situations, the `metaFields` settings object should be enough for user attribution. However, in cases where Ada Chat remains open while page changes occur (like in Single Page Applications), this methods may be useful.

<aside class="notice">
Meta field keys should not include whitespace, emojis, special characters or periods.
</aside>

#### start

```js
window.adaEmbed.start({
  handle: "my-bot",
  language: "fr",
  mobileOverlay: true
});
```

`start(adaSettings: StartOptions): Promise<void>;`


Used to initialize Embed2 on your page. This action is triggered by default internally, so you will likely not need to call it directly unless you are using Embed2 is `lazy` mode, or have called `stop` and want to re-start Embed2.

#### stop
`stop(): Promise<void>;`

Removes Embed2 from your page.

#### toggle
`toggle(): Promise<void>;`

Can be used to programatically open / close the Chat window. This method cannot be used with the `parentElement` option.

#### triggerCampaign
`triggerCampaign(campaignKey: string, options: object): Promise<void>;`

Used to trigger the proactive Campaign with key `campaignKey`.

An optional second argument `options` can be passed. These options may be helpful when testing your Campaign. The options are:
`ignoreStatus?: boolean`: if `ignoreStatus` is `true`, the Campaign will be triggered even if it is inactive or in a draft state.
`ignoreFrequency?: boolean`: if `ignoreFrequency` is `true`, the Campaign will be triggered even if it has already been triggered within the frequency configured on the Campaign.

This action requires the Ada Engage Campaigns feature.

#### trackEvent
`trackEvent(trackEventParams: object)`

Used to track an Event. The object passed to this function can have the following keys:
`eventKey: string`: (required) the key of the Event to track.
`value?: number`: an optional value to assign to the Event.
`meta?: object`: an option object containing metadata corresponding to the Event.

This action requires the Ada Engage Events feature.

## FAQ

#### How do I setup Ada Chat for my mobile app?

Ada now has native support for both iOS and Android apps! Find out more about iOS [here](#ios-sdk), and Android [here](#android-sdk).

#### How do I customize the look and feel of the Ada Chat button?

Ada supports multiple options for button configuration through the dashboard. Without any code, you can customize attributes such as the button colour, size, and icon.

Further customization can be made through the `embedStyles` setting above. CSS selectors can be brittle, and your style customizations may need to be updated from time to time. If this functionality is required, the `ui_customization` feature flag must first be turned on by an Ada ACX team member.

#### How do I customize the look and feel of the Chat window?

Basic branding, including colours and icons, can be configured through the Ada dashboard.

Additional customization of the chat window is available through the `styles` setting, as long as you have the `ui_customization` feature flag enabled. As with `embedStyled` we do not recommend using this feature unless crucial.

#### Ada Embed is rendered as soon as the page loads. How can I delay rendering?

Embed2 features a useful data attribute called `data-lazy`. When defined on your script, Embed2 will not be triggered until you manually call `adaEmbed.start(...)`. Alternatively, the `lazy` property can be passed to the `window.adaSettings`. See [Advanced Setup](#embed2-advanced-setup) for more information.

## Versioning

The Embed script found above is versionless. This means that the latest stable features will be made available to you without any changes to your code.

## Browser Support

Embed supports all major browsers, including Chrome, FireFox, Safari, Edge, IE11+, and mobile browsers.
