# Android SDK
The Ada Android SDK is a small framework that is used to embed your Ada Chat bot into your native Android application.

## Android Installation
The Ada Android SDK can be installed manually or using Gradle.

### Manual
The Ada Android SDK can be installed manually from the `.aar` file. Files can be found [here](https://gitlab.com/adasupport/androidsdk/-/packages).

```groovy
// build.gradle
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
}
```
To install the library you need to save the `.aar` file under your app module `libs` folder, for example `MyAwesomeProject/app/libs`, and include `*.aar` in application level `build.gradle` file.

After that, synchronize the project.

You can also import a file using Android Studio. To do this, go to `File -> New -> New Module`. In the window select `Import .JAR/.AAR Package` and click `Next`. After that, specify the path to the `.aar` file and the module name, and click `Finish`.

```groovy
// build.gradle
implementation project(':new_module_name')
```

Finally, define the implementation for the new local library module.

### Gradle
```groovy
// build.gradle
allprojects {
    repositories {
        maven {
            url "https://gitlab.com/api/v4/projects/25892134/packages/maven"
        }
    }
}
```

The Ada Android SDK can be installed using Gradle from the Ada Support Gitlab repository.

To integrate the SDK, first add the following code to the project level `build.gradle` file.

> If your project has artifacts within the AndroidX namespace, use:

```groovy
implementation 'support.ada.embed:android-sdk-appcompat:1.3.9'
```

> If your project uses Android Support Library, use:

```groovy
implementation 'support.ada.embed:android-sdk-appcompat-legacy:1.3.9'
```

> Be sure to get the latest version at [https://gitlab.com/adasupport/androidsdk/-/packages](https://gitlab.com/adasupport/androidsdk/-/packages).

Next, add the dependency to the application level `build.gradle`.

## Quick Start
After installing the SDK, you can start Ada chat in several ways.

#### XML
```xml
<!-- XML -->
<support.ada.embed.widget.AdaEmbedView
        android:id="@+id/ada_chat_frame"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        app:ada_handle="ada-example" />
```

> Please note "ada-example" is being used for demonstration purposes. Be sure to modify the handle, as well as any other values as needed for your bot.

The simplest way to start Ada Chat is via XML.

To display the view, the `ada_handle` parameter is required. If you specify it as an attribute, the chat will be displayed immediately upon attachment to the parent view. If it is not specified, then you can do it later programmatically using the method `initialize(settings: AdaEmbedView.Settings)`.

```kotlin
// Delayed initialization
val adaView = findViewById(R.id.ada_chat_frame)

adaSettings = AdaEmbedView.Settings.Builder("ada-example")
    .build()
adaView.initialize(adaSettings)
```


#### Programmatically
```kotlin
val adaView = AdaEmbedView(getContext())

val adaSettings = AdaEmbedView.Settings.Builder("ada-example")
    .build()
adaView.initialize(adaSettings)
```

To programmatically create the chat frame, you need to create a view object and pass context to the constructor.

After this, the view will be created, but will not be initialized. To do this call `initialize(settings: AdaEmbedView.Settings)`, passing the settings object as an argument.

Finally, to display the newly created chat frame on screen, simply add the view to your container.

#### Dialog

```kotlin
val dialog = AdaEmbedDialog()
 adaDialog.arguments = Bundle().apply {
    putParcelable(AdaEmbedDialog.ARGUMENT_SETTINGS, settings)
 }
```

```kotlin
dialog.show(supportFragmentManager, AdaEmbedDialog.TAG)
```

> Note that TAG is a simple class name, you can use any value you want.

To display a separate chat window on top of the current window, you can use `AdaEmbedDialog`.

First, create a dialog object and pass the settings to its arguments using a constant `AdaEmbedDialog.ARGUMENT_SETTINGS`.

Then show it using the native Android `show` method.

#### Activity

```kotlin
val intent = Intent(context, AdaEmbedActivity::class.java)
intent.putExtra(AdaEmbedActivity.EXTRA_SETTINGS, settings)
context.startActivity(intent)
```

> Note that you can use "AdaEmbedActivity" as a regular Android activity. For example, flags and actions can be added.

The SDK allows you to open the chat window in a separate window attached to the app navigation. For this you need to use `AdaEmbedActivity`.

Create an `Intent` and put the settings in it with the key `AdaEmbedActiviti.EXTRA_SETTINGS` and run the activity.

#### Send Files

```kotlin
adaView.filePickerCallback = { filePickerCallback ->
    filePickerCallback.onFileTaken(someUri)
    true
}
```

When using Ada Glass (for Zendesk live agent support), end users sometimes need to upload files. `AdaEmbedActivity` and `AdaEmbedDialog` already have this functionality, but if you work directly with `AdaEmbedView` you have to handle it yourself.

To do this, you need to setup a callback to `AdaEmbedView`. This callback will be fired when a user requests to attach a file. When you get the URI you can invoke `filePickerCallback.onFileTaken(someUri)`; it will signal to `AdaEmbedView` that the file is ready to attach. It's also possible to pass `null`, which will cancel the request.

This operation doesn't require you to pass the file URI to callback immediately. You can save `filePickerCallback` and invoke the callback later (eg. take URI via file picker).

To notify `AdaEmbedView` that you are going to handle file attach you should return `true`.

#### Third-Party Cookies

```
app:ada_accept_third_party_cookies = "true"
```

The SDK has support for third-party cookies. Note that apps targeting [Build.VERSION_CODES.KITKAT](https://developer.android.com/reference/android/os/Build.VERSION_CODES#KITKAT) and lower already allow third-party cookies by default.

## API

### Settings
```xml
<!-- Example 1: XML -->
<support.ada.embed.widget.AdaEmbedView
        android:id="@+id/ada_chat_frame"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        app:ada_handle="ada-example"
        app:ada_cluster="ca"
        app:ada_language="en"
        app:ada_handle="ada-example"
        app:ada_greetings="5c59aaabd8269e0339979014"/>
```

```kotlin
// Example 2: Kotlin
val adaSettings = AdaEmbedView.Settings.Builder("ada-example")
    .cluster("ca")
    .greetings("5c59aaabd8269e0339979014")
    .language("en")
    .metaFields(metaFieldsMap)
    .build()
```

Using the SDK, you can configure the initial chat settings for greater customization. Settings can be configured for XML, or programmatically using the`AdaEmbedView.Settings` class.

#### cluster
Specifies the Kubernetes cluster to be used. Unless directed by an Ada team member, you will not need to change this value.

#### greeting
This can be used to customize the greeting messages that new users see. This is useful for setting view-specific greetings across your app. The greeting should correspond to the ID of the Answer you would like to use. The ID can be found in the URL of the corresponding Answer in the dashboard.

#### handle
The handle for your bot. This is a required field.

#### language
Takes in a language code to programmatically set the bot language. Languages must first be turned on in the Settings > Multilingual page of your Ada dashboard. Language codes follow the [ISO 639-1 language format](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).

#### metaFields
Used to pass meta information about a Chatter. This can be useful for tracking information about your end users, as well as for personalizing their experience. For example, you may wish to track the phone_number and name for conversation attribution. Once set, this information can be accessed in the email attachment from Handoff Form submissions, or via the Chatter modal in the Conversations page of your Ada dashboard.

You can also set "meta fields" using XML. For this, you need to create a JSON file in the res/raw directory, and set the reference to the view declaration:

#### zdChatterAuthCallback

> When using AdaEmbedView

```kotlin
adaView.zdChatterAuthCallback = {
    getToken() // this functions returns String
}
```

> When using AdaEmbedDialog

```kotlin
val adaDialog = AdaEmbedDialog()
adaDialog.zdChatterAuthCallback = {
    getToken() // this functions returns String
}
```

When called, the `zdChatterAuthCallback` will request a JWT token (probably generated by your API), and then have it passed to Ada. This allows for validation between your App and Ada that the user is authenticated, and in turn between Ada and Zendesk for verifiable chatter identity.

To implement, `zdChatterAuthCallback` must be defined on `adaView`, or `adaDialog`. If the SDK requests a JWT token, this callback will be fired.

### Actions
#### deleteHistory

```kotlin
adaView.deleteHistory()
```

Deletes the chatter used to fetch conversation logs for an end-user from storage. When a user opens a new Chat window, a new chatter will be generated.

To do this you need to call `deleteHistory()` in your `AdaEmbedView` instance.

#### reset
Creates a new chatter and refreshes the Chat window. Reset can take an optional params: `language`, `metaFields`, and `greeting` to be changed for the new chatter.

To prevent creating a new chatter (and maintain conversation history), param `resetChatHistory` can be passed with a value of `false`.

To do this you need to call `reset()` in your `AdaEmbedView` instance:
```kotlin
adaView.reset()
```
Or with optional params:

```kotlin
val metaFields = hashMapOf("name" to "John", "age" to "20")
adaView.reset(language = "fr", metaFields = metaFields)
```

#### setMetaFields

```kotlin
val metaFields = hashMapOf("name" to "John", "age" to "20")
adaView.setMetaFields(metaFields)
```

The SDK allows you to change your meta fields while the chat frame is displayed.

To do this you need to call `setMetaFields()` in your `AdaEmbedView` instance and pass your new meta fields as an argument:

#### AdaEmbedActivity & AdaEmbedDialog

```kotlin
// AdaEmbedActivity
class MyCustomActivity : AdaEmbedActivity(){
    override fun onResume() {
        super.onResume()
        val adaView = getAdaView()
        adaView.setMetaFields(metaFields)
        adaView.deleteHistory()
        adaView.reset()
    }
}
```

To call actions in the `AdaEmbedActivity`, you first need to create your own activity that inherits `AdaEmbedActivity`. Then using the `getAdaView()` you can obtain the `AdaEmbedView` instance:

```kotlin
// AdaEmbedDialog
val adaDialog = supportFragmentManager.findFragmentByTag(AdaEmbedDialog.TAG) as AdaEmbedDialog
adaDialog.setMetaFields(metaFields)
adaDialog.deleteHistory()
adaDialog.reset()
```

To call actions in the `AdaEmbedDialog`, you can obtain `AdaEmbedDialog` instance from FragmentManager:
